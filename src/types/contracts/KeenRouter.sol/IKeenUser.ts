/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IKeenUserInterface extends utils.Interface {
  functions: {
    "calculateBetReward(address,uint256,address)": FunctionFragment;
    "containsStackUser(uint256,address)": FunctionFragment;
    "createStackUser(address,uint256,address)": FunctionFragment;
    "deleteStackUser(address,uint256,address)": FunctionFragment;
    "getParentAddress(address)": FunctionFragment;
    "userInfos(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "calculateBetReward"
      | "containsStackUser"
      | "createStackUser"
      | "deleteStackUser"
      | "getParentAddress"
      | "userInfos"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "calculateBetReward",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "containsStackUser",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createStackUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteStackUser",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getParentAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfos",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateBetReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containsStackUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createStackUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteStackUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParentAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfos", data: BytesLike): Result;

  events: {};
}

export interface IKeenUser extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKeenUserInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    calculateBetReward(
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    containsStackUser(
      _stackType: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createStackUser(
      _user: PromiseOrValue<string>,
      _stackType: PromiseOrValue<BigNumberish>,
      parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteStackUser(
      _user: PromiseOrValue<string>,
      _stackType: PromiseOrValue<BigNumberish>,
      parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getParentAddress(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { parentAddress: string }>;

    userInfos(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { parent: string; stackType: BigNumber }>;
  };

  calculateBetReward(
    pair: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  containsStackUser(
    _stackType: PromiseOrValue<BigNumberish>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createStackUser(
    _user: PromiseOrValue<string>,
    _stackType: PromiseOrValue<BigNumberish>,
    parent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteStackUser(
    _user: PromiseOrValue<string>,
    _stackType: PromiseOrValue<BigNumberish>,
    parent: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getParentAddress(
    userAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  userInfos(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { parent: string; stackType: BigNumber }>;

  callStatic: {
    calculateBetReward(
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    containsStackUser(
      _stackType: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createStackUser(
      _user: PromiseOrValue<string>,
      _stackType: PromiseOrValue<BigNumberish>,
      parent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteStackUser(
      _user: PromiseOrValue<string>,
      _stackType: PromiseOrValue<BigNumberish>,
      parent: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getParentAddress(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    userInfos(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { parent: string; stackType: BigNumber }>;
  };

  filters: {};

  estimateGas: {
    calculateBetReward(
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    containsStackUser(
      _stackType: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createStackUser(
      _user: PromiseOrValue<string>,
      _stackType: PromiseOrValue<BigNumberish>,
      parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteStackUser(
      _user: PromiseOrValue<string>,
      _stackType: PromiseOrValue<BigNumberish>,
      parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getParentAddress(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfos(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    calculateBetReward(
      pair: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    containsStackUser(
      _stackType: PromiseOrValue<BigNumberish>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createStackUser(
      _user: PromiseOrValue<string>,
      _stackType: PromiseOrValue<BigNumberish>,
      parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteStackUser(
      _user: PromiseOrValue<string>,
      _stackType: PromiseOrValue<BigNumberish>,
      parent: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getParentAddress(
      userAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfos(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
