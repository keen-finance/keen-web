/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IKeenConfigInterface extends utils.Interface {
  functions: {
    "betInterval()": FunctionFragment;
    "betMintFactor(address)": FunctionFragment;
    "betMintMax(address)": FunctionFragment;
    "betReceive()": FunctionFragment;
    "betSender()": FunctionFragment;
    "getBetOdds()": FunctionFragment;
    "getInviteRates()": FunctionFragment;
    "getStackRatios()": FunctionFragment;
    "setBetInterval(uint256)": FunctionFragment;
    "setBetMintFactor(address,uint256)": FunctionFragment;
    "setBetMintMax(address,uint256)": FunctionFragment;
    "setBetOdds(uint256[])": FunctionFragment;
    "setBetReceive(address)": FunctionFragment;
    "setBetSender(address)": FunctionFragment;
    "setInviteRates(uint256[])": FunctionFragment;
    "setStackRatios(uint256,uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "betInterval"
      | "betMintFactor"
      | "betMintMax"
      | "betReceive"
      | "betSender"
      | "getBetOdds"
      | "getInviteRates"
      | "getStackRatios"
      | "setBetInterval"
      | "setBetMintFactor"
      | "setBetMintMax"
      | "setBetOdds"
      | "setBetReceive"
      | "setBetSender"
      | "setInviteRates"
      | "setStackRatios"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "betInterval",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "betMintFactor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "betMintMax",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "betReceive",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "betSender", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBetOdds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getInviteRates",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getStackRatios",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBetInterval",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBetMintFactor",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBetMintMax",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBetOdds",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBetReceive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBetSender",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setInviteRates",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setStackRatios",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "betInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "betMintFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betMintMax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betReceive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betSender", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBetOdds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getInviteRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStackRatios",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBetInterval",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBetMintFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBetMintMax",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setBetOdds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBetReceive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBetSender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInviteRates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStackRatios",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IKeenConfig extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKeenConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    betInterval(overrides?: CallOverrides): Promise<[BigNumber]>;

    betMintFactor(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    betMintMax(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    betReceive(overrides?: CallOverrides): Promise<[string]>;

    betSender(overrides?: CallOverrides): Promise<[string]>;

    getBetOdds(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { _betOdds: BigNumber[] }>;

    getInviteRates(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { inviteRates: BigNumber[] }>;

    getStackRatios(
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { stackRatios: BigNumber[] }>;

    setBetInterval(
      _betInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBetMintFactor(
      _pair: PromiseOrValue<string>,
      _factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBetMintMax(
      _pair: PromiseOrValue<string>,
      _factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBetOdds(
      _betOdds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBetReceive(
      _betReceive: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBetSender(
      _betSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInviteRates(
      _inviteRates: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStackRatios(
      _companyStackRatio: PromiseOrValue<BigNumberish>,
      _committeeStackRatio: PromiseOrValue<BigNumberish>,
      _shareholderStackRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  betInterval(overrides?: CallOverrides): Promise<BigNumber>;

  betMintFactor(
    _pair: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  betMintMax(
    _pair: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  betReceive(overrides?: CallOverrides): Promise<string>;

  betSender(overrides?: CallOverrides): Promise<string>;

  getBetOdds(overrides?: CallOverrides): Promise<BigNumber[]>;

  getInviteRates(overrides?: CallOverrides): Promise<BigNumber[]>;

  getStackRatios(overrides?: CallOverrides): Promise<BigNumber[]>;

  setBetInterval(
    _betInterval: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBetMintFactor(
    _pair: PromiseOrValue<string>,
    _factor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBetMintMax(
    _pair: PromiseOrValue<string>,
    _factor: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBetOdds(
    _betOdds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBetReceive(
    _betReceive: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBetSender(
    _betSender: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInviteRates(
    _inviteRates: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStackRatios(
    _companyStackRatio: PromiseOrValue<BigNumberish>,
    _committeeStackRatio: PromiseOrValue<BigNumberish>,
    _shareholderStackRatio: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    betInterval(overrides?: CallOverrides): Promise<BigNumber>;

    betMintFactor(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    betMintMax(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    betReceive(overrides?: CallOverrides): Promise<string>;

    betSender(overrides?: CallOverrides): Promise<string>;

    getBetOdds(overrides?: CallOverrides): Promise<BigNumber[]>;

    getInviteRates(overrides?: CallOverrides): Promise<BigNumber[]>;

    getStackRatios(overrides?: CallOverrides): Promise<BigNumber[]>;

    setBetInterval(
      _betInterval: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBetMintFactor(
      _pair: PromiseOrValue<string>,
      _factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBetMintMax(
      _pair: PromiseOrValue<string>,
      _factor: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBetOdds(
      _betOdds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setBetReceive(
      _betReceive: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBetSender(
      _betSender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInviteRates(
      _inviteRates: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setStackRatios(
      _companyStackRatio: PromiseOrValue<BigNumberish>,
      _committeeStackRatio: PromiseOrValue<BigNumberish>,
      _shareholderStackRatio: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    betInterval(overrides?: CallOverrides): Promise<BigNumber>;

    betMintFactor(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    betMintMax(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    betReceive(overrides?: CallOverrides): Promise<BigNumber>;

    betSender(overrides?: CallOverrides): Promise<BigNumber>;

    getBetOdds(overrides?: CallOverrides): Promise<BigNumber>;

    getInviteRates(overrides?: CallOverrides): Promise<BigNumber>;

    getStackRatios(overrides?: CallOverrides): Promise<BigNumber>;

    setBetInterval(
      _betInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBetMintFactor(
      _pair: PromiseOrValue<string>,
      _factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBetMintMax(
      _pair: PromiseOrValue<string>,
      _factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBetOdds(
      _betOdds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBetReceive(
      _betReceive: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBetSender(
      _betSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInviteRates(
      _inviteRates: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStackRatios(
      _companyStackRatio: PromiseOrValue<BigNumberish>,
      _committeeStackRatio: PromiseOrValue<BigNumberish>,
      _shareholderStackRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    betInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betMintFactor(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    betMintMax(
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    betReceive(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betSender(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBetOdds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInviteRates(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStackRatios(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBetInterval(
      _betInterval: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBetMintFactor(
      _pair: PromiseOrValue<string>,
      _factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBetMintMax(
      _pair: PromiseOrValue<string>,
      _factor: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBetOdds(
      _betOdds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBetReceive(
      _betReceive: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBetSender(
      _betSender: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInviteRates(
      _inviteRates: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStackRatios(
      _companyStackRatio: PromiseOrValue<BigNumberish>,
      _committeeStackRatio: PromiseOrValue<BigNumberish>,
      _shareholderStackRatio: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
